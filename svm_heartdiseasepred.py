# -*- coding: utf-8 -*-
"""SVM_HeartDiseasePred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PRDbw9jHhSSUvsJ5IcPXNs_Ls-Uh3PpE
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Đọc datasheet từ gg driver và chuyển đổi nó thành một DataFrame
df = pd.read_csv("csv\heart.csv", na_values="?")
print(df)

# In ra số hàng và số cột của df
print(df.shape)

# Hiển thị thông tin tổng quan của df: Tên cột, số lượng cột, tổng số lượng hàng không bị khuyết của mỗi cột, kiểu dữ liệu của mỗi cột
df.info()

df.describe()

# Kiểm tra xem có giá trị khuyết nào ở bên trong DF không
df.isna().sum()

# Xử lí datasheet cho giống với đầu vào dự đoán.
df = df.drop(columns=["slp", "caa", "thall"], axis=1)
print(df)

# Biểu đồ thống kê chuẩn đoán tim khoẻ và tim yếu
# plt.figure(figsize=(8, 8))
# plt.pie(df["output"].value_counts(), labels=df["output"].unique(), autopct='%0.2f%%')
# plt.title('Tỉ lệ có vấn đề và không có vấn đề')
# plt.legend()
# plt.show()

# Tách datasheet thành hai phần: X là tập các đặc trưng và y là tập các nhãn
X = df.drop(columns="output", axis=1)
y = df['output']

print(X)
print(y)

# Xác định tập huấn luyện và tập test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Chuẩn hoá dữ liệu
# Tạo ra bộ chuẩn hoá dữ liệu mới - sử dụng bộ này trong cả quả trình đưa dữ liệu mới vào đự đoán
scaler = StandardScaler()
# Huấn luyện bộ chuẩn hoá với tập X_train
scaler.fit(X_train)

# transform tập train và test bằng bộ chuẩn hoá đã được huấn luyện
X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Xác định thuật toán kernel nào được dùng cho thuật toán SVM
svm = SVC(kernel="rbf")
# Train model
svm.fit(X_train_scaled, y_train)
# Dự đoán
y_pred = svm.predict(X_test_scaled)

print(confusion_matrix(y_test, y_pred))

# Độ chính xác của mô hình:
# Tổng số lượng các dự đoán Tue Positive, Negative Positive với tổng số lượng các dự đoán của mô hình
print("Độ chính xác dự đoán của mô hình: ", accuracy_score(y_test, y_pred))

# Độ chính xác của dự đoán positive: Tỉ lệ giữa số dự đoán True Positive với tổng số lượng dự đoán Positive
print("Độ chính xác của dự doán: ", precision_score(y_test, y_pred))

# Độ nhạy: Độ chính xác dự đoán True Positive so với thực tế
print("Recall: ", recall_score(y_test, y_pred))

"""⛹ ALO! BẮT ĐẦU TỪ ĐÂY LÀ DỰ ĐOÁN Á NHA"""

# Dự đoán theo dữ liệu mới được đưa vào
data_need_pred = pd.read_csv("csv/strong_heart.csv", na_values="?")
print(data_need_pred)

data_need_pred.info()

data_need_pred.isna().sum()

# Xử lý dữ liệu đầu vào cho giống với dữ liệu đã được train
data_need_pred = data_need_pred.drop(columns=["slp", "caa", "thall"], axis=1)
print(data_need_pred)

# Sử dụng lại bộ chuẩn hoá dữ liệu huấn luyện để chuẩn hoá dữ liệu dự đoán
data_scaled = scaler.transform(data_need_pred)
print(data_scaled)

y_true_pred = svm.predict(data_scaled)
print(y_true_pred)

if y_true_pred == 0:
    print("Tim ban dang khoe manh")
else:
    print("Ban dang co kha nang mac benh tim")
